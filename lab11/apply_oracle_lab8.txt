SQL> 
SQL> -- --------------------------------------------------------
SQL> --  Step #1
SQL> --  -------
SQL> --  Using the query from Lab 10, Step 1, insert the query
SQL> --  in the MERGE statement to the RENTAL table.
SQL> -- --------------------------------------------------------
SQL> 
SQL> -- Insert step #1 statements here.
SQL>  MERGE INTO rental target
  2  USING ( SELECT DISTINCT
  3  		  r.rental_id
  4  	   ,	  c.contact_id
  5  	   ,	  TRUNC(tu.check_out_date) AS check_out_date
  6  	   ,	  TRUNC(tu.return_date) AS return_date
  7  	   ,	  1001 AS created_by
  8  	   ,	  TRUNC(SYSDATE) AS creation_date
  9  	   ,	  1001 AS last_updated_by
 10  	   ,	  TRUNC(SYSDATE) AS last_update_date
 11  	   FROM member m INNER JOIN contact c
 12  	   ON	m.member_id = c.member_id INNER JOIN transaction_upload tu
 13  	   ON	c.first_name = tu.first_name
 14  	   AND	NVL(c.middle_name,'x') = NVL(tu.middle_name,'x')
 15  	   AND	c.last_name = tu.last_name
 16  	   AND	tu.account_number = m.account_number LEFT JOIN rental r
 17  	   ON	c.contact_id = r.customer_id
 18  	   AND	TRUNC(tu.check_out_date) = TRUNC(r.check_out_date)
 19  	   AND	TRUNC(tu.return_date) = TRUNC(r.return_date) ) source
 20  ON (target.rental_id = source.rental_id)
 21  WHEN MATCHED THEN
 22  UPDATE SET target.last_updated_by = source.last_updated_by
 23  ,		target.last_update_date = source.last_update_date
 24  WHEN NOT MATCHED THEN
 25  INSERT VALUES
 26  ( rental_s1.nextval
 27  ,	    source.contact_id
 28  ,	    source.check_out_date
 29  ,	    source.return_date
 30  ,	    source.created_by
 31  ,	    source.creation_date
 32  ,	    source.last_updated_by
 33  ,	    source.last_update_date);

4681 rows merged.

SQL> 
SQL> 
SQL> -- Test part 1
SQL> SELECT   TO_CHAR(COUNT(*),'99,999') AS "Rental after merge"
  2  FROM     rental;

Rental                                                                                    
-------                                                                                   
  4,689                                                                                   

1 row selected.

SQL> -- End Test part 1
SQL> 
SQL> 
SQL> -- --------------------------------------------------------
SQL> --  Step #2
SQL> --  -------
SQL> --  Using the query from Lab 10, Step 2, insert the query
SQL> --  in the MERGE statement to the RENTAL_ITEM table.
SQL> -- --------------------------------------------------------
SQL> 
SQL> -- Insert step #2 statements here.
SQL> MERGE INTO rental_item target
  2  USING ( SELECT   ri.rental_item_id
  3  ,	     r.rental_id
  4  	      ,        tu.item_id
  5  	      ,        TRUNC(r.return_date) - TRUNC(r.check_out_date) AS rental_item_price
  6  	      ,        cl.common_lookup_id AS rental_item_type
  7  	      ,        1001 AS created_by
  8  	      ,        TRUNC(SYSDATE) AS creation_date
  9  	      ,        1001 AS last_updated_by
 10  	      ,        TRUNC(SYSDATE) AS last_update_date
 11  	      FROM member m INNER JOIN contact c
 12  	   ON	m.member_id = c.member_id INNER JOIN transaction_upload tu
 13  	   ON	c.first_name = tu.first_name
 14  	   AND	NVL(c.middle_name,'x') = NVL(tu.middle_name,'x')
 15  	   AND	c.last_name = tu.last_name
 16  	   AND	tu.account_number = m.account_number  INNER JOIN common_lookup cl
 17  	     ON cl.common_lookup_type = tu.rental_item_type
 18  	     AND cl.common_lookup_table = 'RENTAL_ITEM'
 19  	     AND cl.common_lookup_column = 'RENTAL_ITEM_TYPE' INNER JOIN rental r
 20  	   ON	r.customer_id = c.contact_id
 21  	   AND	TRUNC(r.check_out_date) = TRUNC(tu.check_out_date)
 22  	   AND	TRUNC(r.return_date) = TRUNC(tu.return_date) LEFT JOIN rental_item ri
 23  	     ON ri.rental_id = r.rental_id ) source
 24  ON (target.rental_item_id = source.rental_item_id)
 25  WHEN MATCHED THEN
 26  UPDATE SET target.last_updated_by = source.last_updated_by
 27  ,		target.last_update_date = source.last_update_date
 28  WHEN NOT MATCHED THEN
 29  INSERT VALUES
 30  ( rental_item_s1.nextval
 31  , source.rental_id
 32  ,	    source.item_id
 33  ,	    source.created_by
 34  ,	    source.creation_date
 35  ,	    source.last_updated_by
 36  ,	    source.last_update_date
 37  ,	    source.rental_item_price
 38  ,	    source.rental_item_type);

11520 rows merged.

SQL> 
SQL> -- Test Part 2
SQL> SELECT   TO_CHAR(COUNT(*),'99,999') AS "Rental Item after merge"
  2  FROM     rental_item;

Rental                                                                                    
-------                                                                                   
 11,533                                                                                   

1 row selected.

SQL> -- End Test Part 2
SQL> 
SQL> -- --------------------------------------------------------
SQL> --  Step #3
SQL> --  -------
SQL> --  Using the query from Lab 10, Step 3, insert the query
SQL> --  in the MERGE statement to the TRANSACTION table.
SQL> -- --------------------------------------------------------
SQL> 
SQL> -- Insert step #3 statements here.
SQL> MERGE INTO transaction target
  2  USING (SELECT t.transaction_id AS transaction_id
  3  	   ,	  tu.payment_account_number AS transaction_account
  4  	   ,	  cl1.common_lookup_id AS transaction_type
  5  	   ,	  TRUNC(tu.transaction_date) AS transaction_date
  6   --     ,	    SUM(tu.transaction_amount) OVER (PARTITION BY r.rental_id) AS transaction_amount
  7  	   ,	  SUM(tu.transaction_amount / 1.06) AS transaction_amount
  8  	   ,	  r.rental_id
  9  	   ,	  cl2.common_lookup_id AS payment_method_type
 10  	   ,	  m.credit_card_number as payment_account_number
 11  	   ,	  1001 AS created_by
 12  	   ,	  TRUNC(SYSDATE) AS creation_date
 13  	   ,	  1001 AS last_updated_by
 14  	   ,	  TRUNC(SYSDATE) AS last_update_date
 15  	   FROM member m INNER JOIN contact c
 16  	   ON	m.member_id = c.member_id INNER JOIN transaction_upload tu
 17  	   ON	c.first_name = tu.first_name
 18  	   AND	NVL(c.middle_name,'x') = NVL(tu.middle_name,'x')
 19  	   AND	c.last_name = tu.last_name
 20  	   AND	tu.account_number = m.account_number INNER JOIN rental r
 21  	   ON	c.contact_id = r.customer_id
 22  	   AND	TRUNC(tu.check_out_date) = TRUNC(r.check_out_date)
 23  	   AND	TRUNC(tu.return_date) = TRUNC(r.return_date)INNER JOIN common_lookup cl1
 24  ON      cl1.common_lookup_table = 'TRANSACTION'
 25  AND     cl1.common_lookup_column = 'TRANSACTION_TYPE'
 26  AND     cl1.common_lookup_type = tu.transaction_type INNER JOIN common_lookup cl2
 27  ON      cl2.common_lookup_table = 'TRANSACTION'
 28  AND     cl2.common_lookup_column = 'PAYMENT_METHOD_TYPE'
 29  AND     cl2.common_lookup_type = tu.payment_method_type LEFT JOIN transaction t
 30  ON t.TRANSACTION_ACCOUNT = tu.payment_account_number
 31  AND t.TRANSACTION_TYPE = cl1.common_lookup_id
 32  AND t.TRANSACTION_DATE = tu.transaction_date
 33  AND t.TRANSACTION_AMOUNT = tu.TRANSACTION_AMOUNT
 34  AND t.PAYMENT_METHOD_type = cl2.common_lookup_id
 35  AND t.PAYMENT_ACCOUNT_NUMBER = tu.payment_account_number
 36  GROUP BY t.transaction_id, tu.account_number, cl1.common_lookup_id, tu.transaction_date,
 37  r.rental_id, cl2.common_lookup_id, tu.payment_account_number) source
 38  ON (target.transaction_id = source.transaction_id)
 39  WHEN MATCHED THEN
 40  UPDATE SET target.last_updated_by = source.last_updated_by
 41  ,		target.last_update_date = source.last_update_date
 42  WHEN NOT MATCHED THEN
 43  INSERT VALUES
 44  ( transaction_s1.nextval
 45  ,	    source.transaction_account
 46  ,	    source.transaction_type
 47  ,	    source.transaction_date
 48  ,	    source.transaction_amount
 49  ,	    source.rental_id
 50  ,	    source.payment_method_type
 51  ,	    source.payment_account_number
 52  ,	    source.created_by
 53  ,	    source.creation_date
 54  ,	    source.last_updated_by
 55  ,	    source.last_update_date);
      ,      m.credit_card_number as payment_account_number
             *
ERROR at line 10:
ORA-00979: not a GROUP BY expression 


SQL> 
SQL> -- Test Part 3
SQL> SELECT   TO_CHAR(COUNT(*),'99,999') AS "Transaction after merge"
  2  FROM     transaction;

Transac                                                                                   
-------                                                                                   
      0                                                                                   

1 row selected.

SQL> -- End Test Part 3
SQL> 
SQL> -- --------------------------------------------------------
SQL> --  Step #4
SQL> --  -------
SQL> --  Insert the MERGE statements to the RENTAL, RENTAL_ITEM,
SQL> --  and TRANSACTION tables into the UPLOAD_TRANSACTION
SQL> --  procedure; execute the UPLOAD_TRANSACTION procedure,
SQL> --  and query the results from the target tables; and
SQL> --  re-execute the UPLOAD_TRANSACTION procedure to
SQL> --  verify that the query returns the same set and only
SQL> --  inserts new records.
SQL> -- --------------------------------------------------------
SQL> 
SQL> -- Insert step #4 statements here.
SQL> -- Start Test part 4a
SQL> -- Create a procedure to wrap the transaction.
SQL> CREATE OR REPLACE PROCEDURE upload_transaction IS
  2  BEGIN
  3    -- Set save point for an all or nothing transaction.
  4    SAVEPOINT starting_point;
  5  
  6    -- Merge into RENTAL table.
  7    MERGE INTO rental target
  8  USING ( SELECT DISTINCT
  9  		  r.rental_id
 10  	   ,	  c.contact_id
 11  	   ,	  TRUNC(tu.check_out_date) AS check_out_date
 12  	   ,	  TRUNC(tu.return_date) AS return_date
 13  	   ,	  1001 AS created_by
 14  	   ,	  TRUNC(SYSDATE) AS creation_date
 15  	   ,	  1001 AS last_updated_by
 16  	   ,	  TRUNC(SYSDATE) AS last_update_date
 17  	   FROM member m INNER JOIN contact c
 18  	   ON	m.member_id = c.member_id INNER JOIN transaction_upload tu
 19  	   ON	c.first_name = tu.first_name
 20  	   AND	NVL(c.middle_name,'x') = NVL(tu.middle_name,'x')
 21  	   AND	c.last_name = tu.last_name
 22  	   AND	tu.account_number = m.account_number LEFT JOIN rental r
 23  	   ON	c.contact_id = r.customer_id
 24  	   AND	TRUNC(tu.check_out_date) = TRUNC(r.check_out_date)
 25  	   AND	TRUNC(tu.return_date) = TRUNC(r.return_date) ) source
 26  ON (target.rental_id = source.rental_id)
 27  WHEN MATCHED THEN
 28  UPDATE SET target.last_updated_by = source.last_updated_by
 29  ,		target.last_update_date = source.last_update_date
 30  WHEN NOT MATCHED THEN
 31  INSERT VALUES
 32  ( rental_s1.nextval
 33  ,	    source.contact_id
 34  ,	    source.check_out_date
 35  ,	    source.return_date
 36  ,	    source.created_by
 37  ,	    source.creation_date
 38  ,	    source.last_updated_by
 39  ,	    source.last_update_date);
 40  
 41    -- Merge into RENTAL_ITEM table.
 42    MERGE INTO rental_item target
 43  USING ( SELECT   ri.rental_item_id
 44  ,	     r.rental_id
 45  	      ,        tu.item_id
 46  	      ,        TRUNC(r.return_date) - TRUNC(r.check_out_date) AS rental_item_price
 47  	      ,        cl.common_lookup_id AS rental_item_type
 48  	      ,        3 AS created_by
 49  	      ,        TRUNC(SYSDATE) AS creation_date
 50  	      ,        3 AS last_updated_by
 51  	      ,        TRUNC(SYSDATE) AS last_update_date
 52  	      FROM member m INNER JOIN contact c
 53  	   ON	m.member_id = c.member_id INNER JOIN transaction_upload tu
 54  	   ON	c.first_name = tu.first_name
 55  	   AND	NVL(c.middle_name,'x') = NVL(tu.middle_name,'x')
 56  	   AND	c.last_name = tu.last_name
 57  	   AND	tu.account_number = m.account_number  INNER JOIN common_lookup cl
 58  	     ON cl.common_lookup_type = tu.rental_item_type
 59  	     AND cl.common_lookup_table = 'RENTAL_ITEM'
 60  	     AND cl.common_lookup_column = 'RENTAL_ITEM_TYPE' INNER JOIN rental r
 61  	   ON	r.customer_id = c.contact_id
 62  	   AND	TRUNC(r.check_out_date) = TRUNC(tu.check_out_date)
 63  	   AND	TRUNC(r.return_date) = TRUNC(tu.return_date) LEFT JOIN rental_item ri
 64  	     ON ri.rental_id = r.rental_id ) source
 65  ON (target.rental_item_id = source.rental_item_id)
 66  WHEN MATCHED THEN
 67  UPDATE SET target.last_updated_by = source.last_updated_by
 68  ,		target.last_update_date = source.last_update_date
 69  WHEN NOT MATCHED THEN
 70  INSERT VALUES
 71  ( rental_item_s1.nextval
 72  , source.rental_id
 73  ,	    source.item_id
 74  ,	    source.created_by
 75  ,	    source.creation_date
 76  ,	    source.last_updated_by
 77  ,	    source.last_update_date
 78  ,	    source.rental_item_price
 79  ,	    source.rental_item_type);
 80  
 81    -- Merge into TRANSACTION table.
 82    MERGE INTO transaction target
 83  USING (SELECT t.transaction_id AS transaction_id
 84  	   ,	  tu.account_number AS transaction_account
 85  	   ,	  cl1.common_lookup_id AS transaction_type
 86  	   ,	  TRUNC(tu.transaction_date) AS transaction_date
 87   --     ,	    SUM(tu.transaction_amount) OVER (PARTITION BY r.rental_id) AS transaction_amount
 88  	   ,	  SUM(tu.transaction_amount / 1.06) AS transaction_amount
 89  	   ,	  r.rental_id
 90  	   ,	  cl2.common_lookup_id AS payment_method_type
 91  	   ,	  tu.payment_account_number
 92  	   ,	  1001 AS created_by
 93  	   ,	  TRUNC(SYSDATE) AS creation_date
 94  	   ,	  1001 AS last_updated_by
 95  	   ,	  TRUNC(SYSDATE) AS last_update_date
 96  	   FROM member m INNER JOIN contact c
 97  	   ON	m.member_id = c.member_id INNER JOIN transaction_upload tu
 98  	   ON	c.first_name = tu.first_name
 99  	   AND	NVL(c.middle_name,'x') = NVL(tu.middle_name,'x')
100  	   AND	c.last_name = tu.last_name
101  	   AND	tu.account_number = m.account_number INNER JOIN rental r
102  	   ON	c.contact_id = r.customer_id
103  	   AND	TRUNC(tu.check_out_date) = TRUNC(r.check_out_date)
104  	   AND	TRUNC(tu.return_date) = TRUNC(r.return_date)INNER JOIN common_lookup cl1
105  ON      cl1.common_lookup_table = 'TRANSACTION'
106  AND     cl1.common_lookup_column = 'TRANSACTION_TYPE'
107  AND     cl1.common_lookup_type = tu.transaction_type INNER JOIN common_lookup cl2
108  ON      cl2.common_lookup_table = 'TRANSACTION'
109  AND     cl2.common_lookup_column = 'PAYMENT_METHOD_TYPE'
110  AND     cl2.common_lookup_type = tu.payment_method_type LEFT JOIN transaction t
111  ON t.TRANSACTION_ACCOUNT = tu.payment_account_number
112  AND t.TRANSACTION_TYPE = cl1.common_lookup_id
113  AND t.TRANSACTION_DATE = tu.transaction_date
114  AND t.TRANSACTION_AMOUNT = tu.TRANSACTION_AMOUNT
115  AND t.PAYMENT_METHOD_type = cl2.common_lookup_id
116  AND t.PAYMENT_ACCOUNT_NUMBER = tu.payment_account_number
117  GROUP BY t.transaction_id, tu.account_number, cl1.common_lookup_id, tu.transaction_date,
118  r.rental_id, cl2.common_lookup_id, tu.payment_account_number) source
119  ON (target.transaction_id = source.transaction_id)
120  WHEN MATCHED THEN
121  UPDATE SET target.last_updated_by = source.last_updated_by
122  ,		target.last_update_date = source.last_update_date
123  WHEN NOT MATCHED THEN
124  INSERT VALUES
125  ( transaction_s1.nextval
126  ,	    source.transaction_account
127  ,	    source.transaction_type
128  ,	    source.transaction_date
129  ,	    source.transaction_amount
130  ,	    source.rental_id
131  ,	    source.payment_method_type
132  ,	    source.payment_account_number
133  ,	    source.created_by
134  ,	    source.creation_date
135  ,	    source.last_updated_by
136  ,	    source.last_update_date);
137  
138    -- Save the changes.
139    COMMIT;
140  
141  EXCEPTION
142    WHEN OTHERS THEN
143  	 ROLLBACK TO starting_point;
144  	 RETURN;
145  END;
146  /

Procedure created.

SQL> -- End Part 4a
SQL> 
SQL> -- Start Part 4b
SQL> EXECUTE upload_transaction;

PL/SQL procedure successfully completed.

SQL> -- End Part 4b
SQL> 
SQL> -- Start Part 4c
SQL> COLUMN rental_count      FORMAT 99,999 HEADING "Rental|Count"
SQL> COLUMN rental_item_count FORMAT 99,999 HEADING "Rental|Item|Count"
SQL> COLUMN transaction_count FORMAT 99,999 HEADING "Transaction|Count"
SQL> 
SQL> SELECT   il1.rental_count
  2  ,	      il2.rental_item_count
  3  ,	      il3.transaction_count
  4  FROM    (SELECT COUNT(*) AS rental_count FROM rental) il1 CROSS JOIN
  5  	     (SELECT COUNT(*) AS rental_item_count FROM rental_item) il2 CROSS JOIN
  6  	     (SELECT COUNT(*) AS transaction_count FROM TRANSACTION) il3;

         Rental                                                                           
 Rental    Item Transaction                                                               
  Count   Count       Count                                                               
------- ------- -----------                                                               
  4,689  11,533           0                                                               

1 row selected.

SQL> -- End Part 4c
SQL> 
SQL> -- Start Part 4d
SQL> EXECUTE upload_transaction;

PL/SQL procedure successfully completed.

SQL> -- End Part 4d
SQL> 
SQL> -- Start Part 4e
SQL> COLUMN rental_count      FORMAT 99,999 HEADING "Rental|Count"
SQL> COLUMN rental_item_count FORMAT 99,999 HEADING "Rental|Item|Count"
SQL> COLUMN transaction_count FORMAT 99,999 HEADING "Transaction|Count"
SQL> 
SQL> SELECT   il1.rental_count
  2  ,	      il2.rental_item_count
  3  ,	      il3.transaction_count
  4  FROM    (SELECT COUNT(*) AS rental_count FROM rental) il1 CROSS JOIN
  5  	     (SELECT COUNT(*) AS rental_item_count FROM rental_item) il2 CROSS JOIN
  6  	     (SELECT COUNT(*) AS transaction_count FROM TRANSACTION) il3;

         Rental                                                                           
 Rental    Item Transaction                                                               
  Count   Count       Count                                                               
------- ------- -----------                                                               
  4,689  11,533           0                                                               

1 row selected.

SQL> -- End part 4e
SQL> -- --------------------------------------------------------
SQL> --  Step #5
SQL> --  -------
SQL> --  Write a query that uses date functions to report
SQL> --  aggregated transaction amount values for base revenue,
SQL> --  110% of revenue, 120% of revenue, 90% of revenue,
SQL> --  80% or revenue.
SQL> -- --------------------------------------------------------
SQL> 
SQL> -- Insert step #5 statements here.
SQL> SET LINESIZE 100
SQL> COLUMN month		 FORMAT A15 HEADING "MONTH"
SQL> COLUMN BASE_REVENUE	 FORMAT A15 HEADING "BASE_REVENUE"
SQL> COLUMN TEN_PLUS		 FORMAT A15 HEADING "10_PLUS"
SQL> COLUMN twenty_plus 	 FORMAT A15 HEADING "20_PLUS"
SQL> COLUMN ten_plus_less_b	 FORMAT A15 HEADING "10_PLUS_LESS_B"
SQL> COLUMN twenty_plus_less_b	 FORMAT A15 HEADING "20_PLUS_LESS_B"
SQL> 
SQL>  SELECT il.MONTH
  2  ,	     il.BASE_REVENUE
  3  ,	     il.ten_plus AS "10_PLUS"
  4  ,	     il.twenty_plus AS "20_PLUS"
  5  ,	     il.ten_plus_less_b AS "10_PLUS_LESS_B"
  6  ,	     il.twenty_plus_less_b AS "20_PLUS_LESS_B"
  7  FROM (SELECT CONCAT(TO_CHAR(t.transaction_Date,'MON'),CONCAT('-',EXTRACT(YEAR FROM t.transaction_date))) AS MONTH
  8  ,	     EXTRACT(MONTH FROM TRUNC(t.transaction_date)) AS sortkey
  9  ,	     TO_CHAR(SUM(t.transaction_amount),'$9,999,999.00') AS BASE_REVENUE
 10  ,	     TO_CHAR(SUM(t.transaction_amount + (t.transaction_amount * .1)),'$9,999,999.00') AS ten_plus
 11  ,	     TO_CHAR(SUM(t.transaction_amount + (t.transaction_amount * .2)),'$9,999,999.00') AS twenty_plus
 12  ,	     TO_CHAR(SUM(t.transaction_amount + (t.transaction_amount * .1)) -
 13  		     SUM(t.transaction_amount),'$9,999,999.00') AS ten_plus_less_b
 14  ,	     TO_CHAR(SUM(t.transaction_amount + (t.transaction_amount * .2)) -
 15  		     SUM(t.transaction_amount),'$9,999,999.00') AS twenty_plus_less_b
 16  FROM transaction t
 17  WHERE EXTRACT(YEAR FROM TRUNC(t.transaction_date)) = 2009
 18  GROUP BY CONCAT(TO_CHAR(t.transaction_Date,'MON'),CONCAT('-',EXTRACT(YEAR FROM t.transaction_date)))
 19  , EXTRACT(MONTH FROM TRUNC(t.transaction_date))) il
 20  ORDER BY il.sortkey;

no rows selected

SQL> -- Close log file.
SQL> SPOOL OFF
